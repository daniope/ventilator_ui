part of ventilation;
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
class VentilationBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  VentilationBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  VentilationBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<VENTILATION_Compliance> VENTILATION_compliance_create(
    double arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_compliance_create(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_compliance_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<VENTILATION_Compliance> Function(
                  ffi.Float, ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_compliance_create');
  late final _VENTILATION_compliance_create =
      _VENTILATION_compliance_createPtr.asFunction<
          ffi.Pointer<VENTILATION_Compliance> Function(
              double, ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_compliance_delete(
    ffi.Pointer<VENTILATION_Compliance> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_compliance_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_compliance_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<VENTILATION_Compliance>,
                  ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_compliance_delete');
  late final _VENTILATION_compliance_delete =
      _VENTILATION_compliance_deletePtr.asFunction<
          void Function(ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>();

  double VENTILATION_compliance_value(
    ffi.Pointer<VENTILATION_Compliance> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_compliance_value(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_compliance_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_compliance_value');
  late final _VENTILATION_compliance_value =
      _VENTILATION_compliance_valuePtr.asFunction<
          double Function(ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Compliance> VENTILATION_compliance_add(
    ffi.Pointer<VENTILATION_Compliance> arg0,
    ffi.Pointer<VENTILATION_Compliance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_compliance_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_compliance_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Compliance> Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_compliance_add');
  late final _VENTILATION_compliance_add =
      _VENTILATION_compliance_addPtr.asFunction<
          ffi.Pointer<VENTILATION_Compliance> Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Compliance> VENTILATION_compliance_sub(
    ffi.Pointer<VENTILATION_Compliance> arg0,
    ffi.Pointer<VENTILATION_Compliance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_compliance_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_compliance_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Compliance> Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_compliance_sub');
  late final _VENTILATION_compliance_sub =
      _VENTILATION_compliance_subPtr.asFunction<
          ffi.Pointer<VENTILATION_Compliance> Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Compliance> VENTILATION_compliance_mul(
    ffi.Pointer<VENTILATION_Compliance> arg0,
    ffi.Pointer<VENTILATION_Compliance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_compliance_mul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_compliance_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Compliance> Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_compliance_mul');
  late final _VENTILATION_compliance_mul =
      _VENTILATION_compliance_mulPtr.asFunction<
          ffi.Pointer<VENTILATION_Compliance> Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_compliance_eq(
    ffi.Pointer<VENTILATION_Compliance> arg0,
    ffi.Pointer<VENTILATION_Compliance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_compliance_eq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_compliance_eqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_compliance_eq');
  late final _VENTILATION_compliance_eq =
      _VENTILATION_compliance_eqPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_compliance_neq(
    ffi.Pointer<VENTILATION_Compliance> arg0,
    ffi.Pointer<VENTILATION_Compliance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_compliance_neq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_compliance_neqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_compliance_neq');
  late final _VENTILATION_compliance_neq =
      _VENTILATION_compliance_neqPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_compliance_gt(
    ffi.Pointer<VENTILATION_Compliance> arg0,
    ffi.Pointer<VENTILATION_Compliance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_compliance_gt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_compliance_gtPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_compliance_gt');
  late final _VENTILATION_compliance_gt =
      _VENTILATION_compliance_gtPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_compliance_ge(
    ffi.Pointer<VENTILATION_Compliance> arg0,
    ffi.Pointer<VENTILATION_Compliance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_compliance_ge(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_compliance_gePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_compliance_ge');
  late final _VENTILATION_compliance_ge =
      _VENTILATION_compliance_gePtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_compliance_lt(
    ffi.Pointer<VENTILATION_Compliance> arg0,
    ffi.Pointer<VENTILATION_Compliance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_compliance_lt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_compliance_ltPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_compliance_lt');
  late final _VENTILATION_compliance_lt =
      _VENTILATION_compliance_ltPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_compliance_le(
    ffi.Pointer<VENTILATION_Compliance> arg0,
    ffi.Pointer<VENTILATION_Compliance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_compliance_le(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_compliance_lePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_compliance_le');
  late final _VENTILATION_compliance_le =
      _VENTILATION_compliance_lePtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_Compliance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Elastance> VENTILATION_elastance_create(
    double arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_elastance_create(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_elastance_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Elastance> Function(ffi.Float,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_create');
  late final _VENTILATION_elastance_create =
      _VENTILATION_elastance_createPtr.asFunction<
          ffi.Pointer<VENTILATION_Elastance> Function(
              double, ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_elastance_delete(
    ffi.Pointer<VENTILATION_Elastance> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_elastance_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_elastance_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_delete');
  late final _VENTILATION_elastance_delete =
      _VENTILATION_elastance_deletePtr.asFunction<
          void Function(ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>();

  double VENTILATION_elastance_value(
    ffi.Pointer<VENTILATION_Elastance> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_elastance_value(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_elastance_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_value');
  late final _VENTILATION_elastance_value =
      _VENTILATION_elastance_valuePtr.asFunction<
          double Function(ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Elastance> VENTILATION_elastance_add(
    ffi.Pointer<VENTILATION_Elastance> arg0,
    ffi.Pointer<VENTILATION_Elastance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_elastance_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_elastance_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Elastance> Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_add');
  late final _VENTILATION_elastance_add =
      _VENTILATION_elastance_addPtr.asFunction<
          ffi.Pointer<VENTILATION_Elastance> Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Elastance> VENTILATION_elastance_sub(
    ffi.Pointer<VENTILATION_Elastance> arg0,
    ffi.Pointer<VENTILATION_Elastance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_elastance_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_elastance_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Elastance> Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_sub');
  late final _VENTILATION_elastance_sub =
      _VENTILATION_elastance_subPtr.asFunction<
          ffi.Pointer<VENTILATION_Elastance> Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Elastance> VENTILATION_elastance_mul(
    ffi.Pointer<VENTILATION_Elastance> arg0,
    ffi.Pointer<VENTILATION_Elastance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_elastance_mul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_elastance_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Elastance> Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_mul');
  late final _VENTILATION_elastance_mul =
      _VENTILATION_elastance_mulPtr.asFunction<
          ffi.Pointer<VENTILATION_Elastance> Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_elastance_eq(
    ffi.Pointer<VENTILATION_Elastance> arg0,
    ffi.Pointer<VENTILATION_Elastance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_elastance_eq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_elastance_eqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_eq');
  late final _VENTILATION_elastance_eq =
      _VENTILATION_elastance_eqPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_elastance_neq(
    ffi.Pointer<VENTILATION_Elastance> arg0,
    ffi.Pointer<VENTILATION_Elastance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_elastance_neq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_elastance_neqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_neq');
  late final _VENTILATION_elastance_neq =
      _VENTILATION_elastance_neqPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_elastance_gt(
    ffi.Pointer<VENTILATION_Elastance> arg0,
    ffi.Pointer<VENTILATION_Elastance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_elastance_gt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_elastance_gtPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_gt');
  late final _VENTILATION_elastance_gt =
      _VENTILATION_elastance_gtPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_elastance_ge(
    ffi.Pointer<VENTILATION_Elastance> arg0,
    ffi.Pointer<VENTILATION_Elastance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_elastance_ge(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_elastance_gePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_ge');
  late final _VENTILATION_elastance_ge =
      _VENTILATION_elastance_gePtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_elastance_lt(
    ffi.Pointer<VENTILATION_Elastance> arg0,
    ffi.Pointer<VENTILATION_Elastance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_elastance_lt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_elastance_ltPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_lt');
  late final _VENTILATION_elastance_lt =
      _VENTILATION_elastance_ltPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_elastance_le(
    ffi.Pointer<VENTILATION_Elastance> arg0,
    ffi.Pointer<VENTILATION_Elastance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_elastance_le(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_elastance_lePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_elastance_le');
  late final _VENTILATION_elastance_le =
      _VENTILATION_elastance_lePtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Resistance> VENTILATION_resistance_create(
    double arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_resistance_create(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_resistance_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<VENTILATION_Resistance> Function(
                  ffi.Float, ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_resistance_create');
  late final _VENTILATION_resistance_create =
      _VENTILATION_resistance_createPtr.asFunction<
          ffi.Pointer<VENTILATION_Resistance> Function(
              double, ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_resistance_delete(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_resistance_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_resistance_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<VENTILATION_Resistance>,
                  ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_resistance_delete');
  late final _VENTILATION_resistance_delete =
      _VENTILATION_resistance_deletePtr.asFunction<
          void Function(ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>();

  double VENTILATION_resistance_value(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_resistance_value(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_resistance_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_resistance_value');
  late final _VENTILATION_resistance_value =
      _VENTILATION_resistance_valuePtr.asFunction<
          double Function(ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Resistance> VENTILATION_resistance_add(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_Resistance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_resistance_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_resistance_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Resistance> Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_resistance_add');
  late final _VENTILATION_resistance_add =
      _VENTILATION_resistance_addPtr.asFunction<
          ffi.Pointer<VENTILATION_Resistance> Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Resistance> VENTILATION_resistance_sub(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_Resistance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_resistance_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_resistance_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Resistance> Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_resistance_sub');
  late final _VENTILATION_resistance_sub =
      _VENTILATION_resistance_subPtr.asFunction<
          ffi.Pointer<VENTILATION_Resistance> Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Resistance> VENTILATION_resistance_mul(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_Resistance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_resistance_mul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_resistance_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Resistance> Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_resistance_mul');
  late final _VENTILATION_resistance_mul =
      _VENTILATION_resistance_mulPtr.asFunction<
          ffi.Pointer<VENTILATION_Resistance> Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_resistance_eq(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_Resistance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_resistance_eq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_resistance_eqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_resistance_eq');
  late final _VENTILATION_resistance_eq =
      _VENTILATION_resistance_eqPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_resistance_neq(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_Resistance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_resistance_neq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_resistance_neqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_resistance_neq');
  late final _VENTILATION_resistance_neq =
      _VENTILATION_resistance_neqPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_resistance_gt(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_Resistance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_resistance_gt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_resistance_gtPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_resistance_gt');
  late final _VENTILATION_resistance_gt =
      _VENTILATION_resistance_gtPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_resistance_ge(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_Resistance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_resistance_ge(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_resistance_gePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_resistance_ge');
  late final _VENTILATION_resistance_ge =
      _VENTILATION_resistance_gePtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_resistance_lt(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_Resistance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_resistance_lt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_resistance_ltPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_resistance_lt');
  late final _VENTILATION_resistance_lt =
      _VENTILATION_resistance_ltPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_resistance_le(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_Resistance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_resistance_le(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_resistance_lePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_resistance_le');
  late final _VENTILATION_resistance_le =
      _VENTILATION_resistance_lePtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Flow> VENTILATION_flow_create(
    double arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_flow_create(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_flow_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Flow> Function(ffi.Float,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_create');
  late final _VENTILATION_flow_create = _VENTILATION_flow_createPtr.asFunction<
      ffi.Pointer<VENTILATION_Flow> Function(
          double, ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_flow_delete(
    ffi.Pointer<VENTILATION_Flow> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_flow_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_flow_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_delete');
  late final _VENTILATION_flow_delete = _VENTILATION_flow_deletePtr.asFunction<
      void Function(
          ffi.Pointer<VENTILATION_Flow>, ffi.Pointer<VENTILATION_error>)>();

  double VENTILATION_flow_value(
    ffi.Pointer<VENTILATION_Flow> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_flow_value(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_flow_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_value');
  late final _VENTILATION_flow_value = _VENTILATION_flow_valuePtr.asFunction<
      double Function(
          ffi.Pointer<VENTILATION_Flow>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Flow> VENTILATION_flow_add(
    ffi.Pointer<VENTILATION_Flow> arg0,
    ffi.Pointer<VENTILATION_Flow> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_flow_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_flow_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Flow> Function(
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_add');
  late final _VENTILATION_flow_add = _VENTILATION_flow_addPtr.asFunction<
      ffi.Pointer<VENTILATION_Flow> Function(ffi.Pointer<VENTILATION_Flow>,
          ffi.Pointer<VENTILATION_Flow>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Flow> VENTILATION_flow_sub(
    ffi.Pointer<VENTILATION_Flow> arg0,
    ffi.Pointer<VENTILATION_Flow> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_flow_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_flow_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Flow> Function(
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_sub');
  late final _VENTILATION_flow_sub = _VENTILATION_flow_subPtr.asFunction<
      ffi.Pointer<VENTILATION_Flow> Function(ffi.Pointer<VENTILATION_Flow>,
          ffi.Pointer<VENTILATION_Flow>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Flow> VENTILATION_flow_mul(
    ffi.Pointer<VENTILATION_Flow> arg0,
    ffi.Pointer<VENTILATION_Flow> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_flow_mul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_flow_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Flow> Function(
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_mul');
  late final _VENTILATION_flow_mul = _VENTILATION_flow_mulPtr.asFunction<
      ffi.Pointer<VENTILATION_Flow> Function(ffi.Pointer<VENTILATION_Flow>,
          ffi.Pointer<VENTILATION_Flow>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_flow_eq(
    ffi.Pointer<VENTILATION_Flow> arg0,
    ffi.Pointer<VENTILATION_Flow> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_flow_eq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_flow_eqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_eq');
  late final _VENTILATION_flow_eq = _VENTILATION_flow_eqPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Flow>, ffi.Pointer<VENTILATION_Flow>,
          ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_flow_neq(
    ffi.Pointer<VENTILATION_Flow> arg0,
    ffi.Pointer<VENTILATION_Flow> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_flow_neq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_flow_neqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_neq');
  late final _VENTILATION_flow_neq = _VENTILATION_flow_neqPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Flow>, ffi.Pointer<VENTILATION_Flow>,
          ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_flow_gt(
    ffi.Pointer<VENTILATION_Flow> arg0,
    ffi.Pointer<VENTILATION_Flow> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_flow_gt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_flow_gtPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_gt');
  late final _VENTILATION_flow_gt = _VENTILATION_flow_gtPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Flow>, ffi.Pointer<VENTILATION_Flow>,
          ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_flow_ge(
    ffi.Pointer<VENTILATION_Flow> arg0,
    ffi.Pointer<VENTILATION_Flow> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_flow_ge(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_flow_gePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_ge');
  late final _VENTILATION_flow_ge = _VENTILATION_flow_gePtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Flow>, ffi.Pointer<VENTILATION_Flow>,
          ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_flow_lt(
    ffi.Pointer<VENTILATION_Flow> arg0,
    ffi.Pointer<VENTILATION_Flow> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_flow_lt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_flow_ltPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_lt');
  late final _VENTILATION_flow_lt = _VENTILATION_flow_ltPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Flow>, ffi.Pointer<VENTILATION_Flow>,
          ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_flow_le(
    ffi.Pointer<VENTILATION_Flow> arg0,
    ffi.Pointer<VENTILATION_Flow> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_flow_le(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_flow_lePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_flow_le');
  late final _VENTILATION_flow_le = _VENTILATION_flow_lePtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Flow>, ffi.Pointer<VENTILATION_Flow>,
          ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Pressure> VENTILATION_pressure_create(
    double arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_pressure_create(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_pressure_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(ffi.Float,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_create');
  late final _VENTILATION_pressure_create =
      _VENTILATION_pressure_createPtr.asFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(
              double, ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_pressure_delete(
    ffi.Pointer<VENTILATION_Pressure> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_pressure_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_pressure_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_delete');
  late final _VENTILATION_pressure_delete =
      _VENTILATION_pressure_deletePtr.asFunction<
          void Function(ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>();

  double VENTILATION_pressure_value(
    ffi.Pointer<VENTILATION_Pressure> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_pressure_value(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_pressure_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_value');
  late final _VENTILATION_pressure_value =
      _VENTILATION_pressure_valuePtr.asFunction<
          double Function(ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Pressure> VENTILATION_pressure_add(
    ffi.Pointer<VENTILATION_Pressure> arg0,
    ffi.Pointer<VENTILATION_Pressure> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_add');
  late final _VENTILATION_pressure_add =
      _VENTILATION_pressure_addPtr.asFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Pressure> VENTILATION_pressure_sub(
    ffi.Pointer<VENTILATION_Pressure> arg0,
    ffi.Pointer<VENTILATION_Pressure> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_sub');
  late final _VENTILATION_pressure_sub =
      _VENTILATION_pressure_subPtr.asFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Pressure> VENTILATION_pressure_mul(
    ffi.Pointer<VENTILATION_Pressure> arg0,
    ffi.Pointer<VENTILATION_Pressure> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_mul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_mul');
  late final _VENTILATION_pressure_mul =
      _VENTILATION_pressure_mulPtr.asFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_eq(
    ffi.Pointer<VENTILATION_Pressure> arg0,
    ffi.Pointer<VENTILATION_Pressure> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_eq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_eqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_eq');
  late final _VENTILATION_pressure_eq = _VENTILATION_pressure_eqPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Pressure>,
          ffi.Pointer<VENTILATION_Pressure>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_neq(
    ffi.Pointer<VENTILATION_Pressure> arg0,
    ffi.Pointer<VENTILATION_Pressure> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_neq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_neqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_neq');
  late final _VENTILATION_pressure_neq =
      _VENTILATION_pressure_neqPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_gt(
    ffi.Pointer<VENTILATION_Pressure> arg0,
    ffi.Pointer<VENTILATION_Pressure> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_gt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_gtPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_gt');
  late final _VENTILATION_pressure_gt = _VENTILATION_pressure_gtPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Pressure>,
          ffi.Pointer<VENTILATION_Pressure>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_ge(
    ffi.Pointer<VENTILATION_Pressure> arg0,
    ffi.Pointer<VENTILATION_Pressure> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_ge(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_gePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_ge');
  late final _VENTILATION_pressure_ge = _VENTILATION_pressure_gePtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Pressure>,
          ffi.Pointer<VENTILATION_Pressure>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_lt(
    ffi.Pointer<VENTILATION_Pressure> arg0,
    ffi.Pointer<VENTILATION_Pressure> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_lt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_ltPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_lt');
  late final _VENTILATION_pressure_lt = _VENTILATION_pressure_ltPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Pressure>,
          ffi.Pointer<VENTILATION_Pressure>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_le(
    ffi.Pointer<VENTILATION_Pressure> arg0,
    ffi.Pointer<VENTILATION_Pressure> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_le(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_lePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_Pressure>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_le');
  late final _VENTILATION_pressure_le = _VENTILATION_pressure_lePtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Pressure>,
          ffi.Pointer<VENTILATION_Pressure>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_PEEP> VENTILATION_peep_create(
    double arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_peep_create(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_peep_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_PEEP> Function(ffi.Float,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_create');
  late final _VENTILATION_peep_create = _VENTILATION_peep_createPtr.asFunction<
      ffi.Pointer<VENTILATION_PEEP> Function(
          double, ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_peep_delete(
    ffi.Pointer<VENTILATION_PEEP> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_peep_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_peep_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_delete');
  late final _VENTILATION_peep_delete = _VENTILATION_peep_deletePtr.asFunction<
      void Function(
          ffi.Pointer<VENTILATION_PEEP>, ffi.Pointer<VENTILATION_error>)>();

  double VENTILATION_peep_value(
    ffi.Pointer<VENTILATION_PEEP> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_peep_value(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_peep_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_value');
  late final _VENTILATION_peep_value = _VENTILATION_peep_valuePtr.asFunction<
      double Function(
          ffi.Pointer<VENTILATION_PEEP>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_PEEP> VENTILATION_peep_add(
    ffi.Pointer<VENTILATION_PEEP> arg0,
    ffi.Pointer<VENTILATION_PEEP> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_peep_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_peep_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_PEEP> Function(
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_add');
  late final _VENTILATION_peep_add = _VENTILATION_peep_addPtr.asFunction<
      ffi.Pointer<VENTILATION_PEEP> Function(ffi.Pointer<VENTILATION_PEEP>,
          ffi.Pointer<VENTILATION_PEEP>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_PEEP> VENTILATION_peep_sub(
    ffi.Pointer<VENTILATION_PEEP> arg0,
    ffi.Pointer<VENTILATION_PEEP> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_peep_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_peep_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_PEEP> Function(
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_sub');
  late final _VENTILATION_peep_sub = _VENTILATION_peep_subPtr.asFunction<
      ffi.Pointer<VENTILATION_PEEP> Function(ffi.Pointer<VENTILATION_PEEP>,
          ffi.Pointer<VENTILATION_PEEP>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_PEEP> VENTILATION_peep_mul(
    ffi.Pointer<VENTILATION_PEEP> arg0,
    ffi.Pointer<VENTILATION_PEEP> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_peep_mul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_peep_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_PEEP> Function(
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_mul');
  late final _VENTILATION_peep_mul = _VENTILATION_peep_mulPtr.asFunction<
      ffi.Pointer<VENTILATION_PEEP> Function(ffi.Pointer<VENTILATION_PEEP>,
          ffi.Pointer<VENTILATION_PEEP>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_peep_eq(
    ffi.Pointer<VENTILATION_PEEP> arg0,
    ffi.Pointer<VENTILATION_PEEP> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_peep_eq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_peep_eqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_eq');
  late final _VENTILATION_peep_eq = _VENTILATION_peep_eqPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_PEEP>, ffi.Pointer<VENTILATION_PEEP>,
          ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_peep_neq(
    ffi.Pointer<VENTILATION_PEEP> arg0,
    ffi.Pointer<VENTILATION_PEEP> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_peep_neq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_peep_neqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_neq');
  late final _VENTILATION_peep_neq = _VENTILATION_peep_neqPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_PEEP>, ffi.Pointer<VENTILATION_PEEP>,
          ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_peep_gt(
    ffi.Pointer<VENTILATION_PEEP> arg0,
    ffi.Pointer<VENTILATION_PEEP> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_peep_gt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_peep_gtPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_gt');
  late final _VENTILATION_peep_gt = _VENTILATION_peep_gtPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_PEEP>, ffi.Pointer<VENTILATION_PEEP>,
          ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_peep_ge(
    ffi.Pointer<VENTILATION_PEEP> arg0,
    ffi.Pointer<VENTILATION_PEEP> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_peep_ge(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_peep_gePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_ge');
  late final _VENTILATION_peep_ge = _VENTILATION_peep_gePtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_PEEP>, ffi.Pointer<VENTILATION_PEEP>,
          ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_peep_lt(
    ffi.Pointer<VENTILATION_PEEP> arg0,
    ffi.Pointer<VENTILATION_PEEP> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_peep_lt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_peep_ltPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_lt');
  late final _VENTILATION_peep_lt = _VENTILATION_peep_ltPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_PEEP>, ffi.Pointer<VENTILATION_PEEP>,
          ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_peep_le(
    ffi.Pointer<VENTILATION_PEEP> arg0,
    ffi.Pointer<VENTILATION_PEEP> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_peep_le(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_peep_lePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_peep_le');
  late final _VENTILATION_peep_le = _VENTILATION_peep_lePtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_PEEP>, ffi.Pointer<VENTILATION_PEEP>,
          ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Pressure_Peak> VENTILATION_pressure_peak_create(
    double arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_pressure_peak_create(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_pressure_peak_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<VENTILATION_Pressure_Peak> Function(
                  ffi.Float, ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_pressure_peak_create');
  late final _VENTILATION_pressure_peak_create =
      _VENTILATION_pressure_peak_createPtr.asFunction<
          ffi.Pointer<VENTILATION_Pressure_Peak> Function(
              double, ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_pressure_peak_delete(
    ffi.Pointer<VENTILATION_Pressure_Peak> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_pressure_peak_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_pressure_peak_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<VENTILATION_Pressure_Peak>,
                  ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_pressure_peak_delete');
  late final _VENTILATION_pressure_peak_delete =
      _VENTILATION_pressure_peak_deletePtr.asFunction<
          void Function(ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  double VENTILATION_pressure_peak_value(
    ffi.Pointer<VENTILATION_Pressure_Peak> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_pressure_peak_value(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_pressure_peak_valuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<VENTILATION_Pressure_Peak>,
                  ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_pressure_peak_value');
  late final _VENTILATION_pressure_peak_value =
      _VENTILATION_pressure_peak_valuePtr.asFunction<
          double Function(ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Pressure_Peak> VENTILATION_pressure_peak_add(
    ffi.Pointer<VENTILATION_Pressure_Peak> arg0,
    ffi.Pointer<VENTILATION_Pressure_Peak> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_peak_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_peak_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<VENTILATION_Pressure_Peak> Function(
                  ffi.Pointer<VENTILATION_Pressure_Peak>,
                  ffi.Pointer<VENTILATION_Pressure_Peak>,
                  ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_pressure_peak_add');
  late final _VENTILATION_pressure_peak_add =
      _VENTILATION_pressure_peak_addPtr.asFunction<
          ffi.Pointer<VENTILATION_Pressure_Peak> Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Pressure_Peak> VENTILATION_pressure_peak_sub(
    ffi.Pointer<VENTILATION_Pressure_Peak> arg0,
    ffi.Pointer<VENTILATION_Pressure_Peak> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_peak_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_peak_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<VENTILATION_Pressure_Peak> Function(
                  ffi.Pointer<VENTILATION_Pressure_Peak>,
                  ffi.Pointer<VENTILATION_Pressure_Peak>,
                  ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_pressure_peak_sub');
  late final _VENTILATION_pressure_peak_sub =
      _VENTILATION_pressure_peak_subPtr.asFunction<
          ffi.Pointer<VENTILATION_Pressure_Peak> Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Pressure_Peak> VENTILATION_pressure_peak_mul(
    ffi.Pointer<VENTILATION_Pressure_Peak> arg0,
    ffi.Pointer<VENTILATION_Pressure_Peak> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_peak_mul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_peak_mulPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<VENTILATION_Pressure_Peak> Function(
                  ffi.Pointer<VENTILATION_Pressure_Peak>,
                  ffi.Pointer<VENTILATION_Pressure_Peak>,
                  ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_pressure_peak_mul');
  late final _VENTILATION_pressure_peak_mul =
      _VENTILATION_pressure_peak_mulPtr.asFunction<
          ffi.Pointer<VENTILATION_Pressure_Peak> Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_peak_eq(
    ffi.Pointer<VENTILATION_Pressure_Peak> arg0,
    ffi.Pointer<VENTILATION_Pressure_Peak> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_peak_eq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_peak_eqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_peak_eq');
  late final _VENTILATION_pressure_peak_eq =
      _VENTILATION_pressure_peak_eqPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_peak_neq(
    ffi.Pointer<VENTILATION_Pressure_Peak> arg0,
    ffi.Pointer<VENTILATION_Pressure_Peak> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_peak_neq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_peak_neqPtr = _lookup<
          ffi.NativeFunction<
              VENTILATION_bool Function(
                  ffi.Pointer<VENTILATION_Pressure_Peak>,
                  ffi.Pointer<VENTILATION_Pressure_Peak>,
                  ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_pressure_peak_neq');
  late final _VENTILATION_pressure_peak_neq =
      _VENTILATION_pressure_peak_neqPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_peak_gt(
    ffi.Pointer<VENTILATION_Pressure_Peak> arg0,
    ffi.Pointer<VENTILATION_Pressure_Peak> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_peak_gt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_peak_gtPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_peak_gt');
  late final _VENTILATION_pressure_peak_gt =
      _VENTILATION_pressure_peak_gtPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_peak_ge(
    ffi.Pointer<VENTILATION_Pressure_Peak> arg0,
    ffi.Pointer<VENTILATION_Pressure_Peak> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_peak_ge(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_peak_gePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_peak_ge');
  late final _VENTILATION_pressure_peak_ge =
      _VENTILATION_pressure_peak_gePtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_peak_lt(
    ffi.Pointer<VENTILATION_Pressure_Peak> arg0,
    ffi.Pointer<VENTILATION_Pressure_Peak> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_peak_lt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_peak_ltPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_peak_lt');
  late final _VENTILATION_pressure_peak_lt =
      _VENTILATION_pressure_peak_ltPtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_pressure_peak_le(
    ffi.Pointer<VENTILATION_Pressure_Peak> arg0,
    ffi.Pointer<VENTILATION_Pressure_Peak> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_pressure_peak_le(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_pressure_peak_lePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_pressure_peak_le');
  late final _VENTILATION_pressure_peak_le =
      _VENTILATION_pressure_peak_lePtr.asFunction<
          int Function(
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Volume> VENTILATION_volume_create(
    double arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_volume_create(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_volume_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Volume> Function(ffi.Float,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_create');
  late final _VENTILATION_volume_create =
      _VENTILATION_volume_createPtr.asFunction<
          ffi.Pointer<VENTILATION_Volume> Function(
              double, ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_volume_delete(
    ffi.Pointer<VENTILATION_Volume> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_volume_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_volume_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_delete');
  late final _VENTILATION_volume_delete =
      _VENTILATION_volume_deletePtr.asFunction<
          void Function(ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>();

  double VENTILATION_volume_value(
    ffi.Pointer<VENTILATION_Volume> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_volume_value(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_volume_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_value');
  late final _VENTILATION_volume_value =
      _VENTILATION_volume_valuePtr.asFunction<
          double Function(ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Volume> VENTILATION_volume_add(
    ffi.Pointer<VENTILATION_Volume> arg0,
    ffi.Pointer<VENTILATION_Volume> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_volume_add(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_volume_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Volume> Function(
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_add');
  late final _VENTILATION_volume_add = _VENTILATION_volume_addPtr.asFunction<
      ffi.Pointer<VENTILATION_Volume> Function(ffi.Pointer<VENTILATION_Volume>,
          ffi.Pointer<VENTILATION_Volume>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Volume> VENTILATION_volume_sub(
    ffi.Pointer<VENTILATION_Volume> arg0,
    ffi.Pointer<VENTILATION_Volume> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_volume_sub(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_volume_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Volume> Function(
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_sub');
  late final _VENTILATION_volume_sub = _VENTILATION_volume_subPtr.asFunction<
      ffi.Pointer<VENTILATION_Volume> Function(ffi.Pointer<VENTILATION_Volume>,
          ffi.Pointer<VENTILATION_Volume>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Volume> VENTILATION_volume_mul(
    ffi.Pointer<VENTILATION_Volume> arg0,
    ffi.Pointer<VENTILATION_Volume> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_volume_mul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_volume_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Volume> Function(
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_mul');
  late final _VENTILATION_volume_mul = _VENTILATION_volume_mulPtr.asFunction<
      ffi.Pointer<VENTILATION_Volume> Function(ffi.Pointer<VENTILATION_Volume>,
          ffi.Pointer<VENTILATION_Volume>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_volume_eq(
    ffi.Pointer<VENTILATION_Volume> arg0,
    ffi.Pointer<VENTILATION_Volume> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_volume_eq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_volume_eqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_eq');
  late final _VENTILATION_volume_eq = _VENTILATION_volume_eqPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Volume>,
          ffi.Pointer<VENTILATION_Volume>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_volume_neq(
    ffi.Pointer<VENTILATION_Volume> arg0,
    ffi.Pointer<VENTILATION_Volume> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_volume_neq(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_volume_neqPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_neq');
  late final _VENTILATION_volume_neq = _VENTILATION_volume_neqPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Volume>,
          ffi.Pointer<VENTILATION_Volume>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_volume_gt(
    ffi.Pointer<VENTILATION_Volume> arg0,
    ffi.Pointer<VENTILATION_Volume> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_volume_gt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_volume_gtPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_gt');
  late final _VENTILATION_volume_gt = _VENTILATION_volume_gtPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Volume>,
          ffi.Pointer<VENTILATION_Volume>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_volume_ge(
    ffi.Pointer<VENTILATION_Volume> arg0,
    ffi.Pointer<VENTILATION_Volume> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_volume_ge(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_volume_gePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_ge');
  late final _VENTILATION_volume_ge = _VENTILATION_volume_gePtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Volume>,
          ffi.Pointer<VENTILATION_Volume>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_volume_lt(
    ffi.Pointer<VENTILATION_Volume> arg0,
    ffi.Pointer<VENTILATION_Volume> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_volume_lt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_volume_ltPtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_lt');
  late final _VENTILATION_volume_lt = _VENTILATION_volume_ltPtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Volume>,
          ffi.Pointer<VENTILATION_Volume>, ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_volume_le(
    ffi.Pointer<VENTILATION_Volume> arg0,
    ffi.Pointer<VENTILATION_Volume> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_volume_le(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_volume_lePtr = _lookup<
      ffi.NativeFunction<
          VENTILATION_bool Function(
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_volume_le');
  late final _VENTILATION_volume_le = _VENTILATION_volume_lePtr.asFunction<
      int Function(ffi.Pointer<VENTILATION_Volume>,
          ffi.Pointer<VENTILATION_Volume>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Packet> VENTILATION_packet_create(
    double arg0,
    double arg1,
    double arg2,
    ffi.Pointer<VENTILATION_error> arg3,
  ) {
    return _VENTILATION_packet_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _VENTILATION_packet_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Packet> Function(
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_packet_create');
  late final _VENTILATION_packet_create =
      _VENTILATION_packet_createPtr.asFunction<
          ffi.Pointer<VENTILATION_Packet> Function(
              double, double, double, ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_packet_delete(
    ffi.Pointer<VENTILATION_Packet> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_packet_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_packet_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<VENTILATION_Packet>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_packet_delete');
  late final _VENTILATION_packet_delete =
      _VENTILATION_packet_deletePtr.asFunction<
          void Function(ffi.Pointer<VENTILATION_Packet>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Pressure> VENTILATION_packet_pressure(
    ffi.Pointer<VENTILATION_Packet> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_packet_pressure(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_packet_pressurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(
              ffi.Pointer<VENTILATION_Packet>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_packet_pressure');
  late final _VENTILATION_packet_pressure =
      _VENTILATION_packet_pressurePtr.asFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(
              ffi.Pointer<VENTILATION_Packet>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Flow> VENTILATION_packet_flow(
    ffi.Pointer<VENTILATION_Packet> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_packet_flow(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_packet_flowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Flow> Function(
              ffi.Pointer<VENTILATION_Packet>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_packet_flow');
  late final _VENTILATION_packet_flow = _VENTILATION_packet_flowPtr.asFunction<
      ffi.Pointer<VENTILATION_Flow> Function(
          ffi.Pointer<VENTILATION_Packet>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Volume> VENTILATION_packet_volume(
    ffi.Pointer<VENTILATION_Packet> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_packet_volume(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_packet_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Volume> Function(
              ffi.Pointer<VENTILATION_Packet>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_packet_volume');
  late final _VENTILATION_packet_volume =
      _VENTILATION_packet_volumePtr.asFunction<
          ffi.Pointer<VENTILATION_Volume> Function(
              ffi.Pointer<VENTILATION_Packet>,
              ffi.Pointer<VENTILATION_error>)>();

  int VENTILATION_packet_string(
    ffi.Pointer<VENTILATION_Packet> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<VENTILATION_error> arg3,
  ) {
    return _VENTILATION_packet_string(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _VENTILATION_packet_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<VENTILATION_Packet>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_packet_string');
  late final _VENTILATION_packet_string =
      _VENTILATION_packet_stringPtr.asFunction<
          int Function(ffi.Pointer<VENTILATION_Packet>, ffi.Pointer<ffi.Char>,
              int, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Lung> VENTILATION_lung_create(
    ffi.Pointer<VENTILATION_Resistance> arg0,
    ffi.Pointer<VENTILATION_Elastance> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_lung_create(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_lung_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Lung> Function(
              ffi.Pointer<VENTILATION_Resistance>,
              ffi.Pointer<VENTILATION_Elastance>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_lung_create');
  late final _VENTILATION_lung_create = _VENTILATION_lung_createPtr.asFunction<
      ffi.Pointer<VENTILATION_Lung> Function(
          ffi.Pointer<VENTILATION_Resistance>,
          ffi.Pointer<VENTILATION_Elastance>,
          ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_lung_delete(
    ffi.Pointer<VENTILATION_Lung> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_lung_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_lung_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<VENTILATION_Lung>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_lung_delete');
  late final _VENTILATION_lung_delete = _VENTILATION_lung_deletePtr.asFunction<
      void Function(
          ffi.Pointer<VENTILATION_Lung>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Resistance> VENTILATION_lung_resistance(
    ffi.Pointer<VENTILATION_Lung> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_lung_resistance(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_lung_resistancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Resistance> Function(
              ffi.Pointer<VENTILATION_Lung>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_lung_resistance');
  late final _VENTILATION_lung_resistance =
      _VENTILATION_lung_resistancePtr.asFunction<
          ffi.Pointer<VENTILATION_Resistance> Function(
              ffi.Pointer<VENTILATION_Lung>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Elastance> VENTILATION_lung_elastance(
    ffi.Pointer<VENTILATION_Lung> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_lung_elastance(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_lung_elastancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Elastance> Function(
              ffi.Pointer<VENTILATION_Lung>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_lung_elastance');
  late final _VENTILATION_lung_elastance =
      _VENTILATION_lung_elastancePtr.asFunction<
          ffi.Pointer<VENTILATION_Elastance> Function(
              ffi.Pointer<VENTILATION_Lung>, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Pressure> VENTILATION_lung_forward(
    ffi.Pointer<VENTILATION_Lung> arg0,
    ffi.Pointer<VENTILATION_Flow> arg1,
    ffi.Pointer<VENTILATION_Volume> arg2,
    ffi.Pointer<VENTILATION_error> arg3,
  ) {
    return _VENTILATION_lung_forward(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _VENTILATION_lung_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(
              ffi.Pointer<VENTILATION_Lung>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_lung_forward');
  late final _VENTILATION_lung_forward =
      _VENTILATION_lung_forwardPtr.asFunction<
          ffi.Pointer<VENTILATION_Pressure> Function(
              ffi.Pointer<VENTILATION_Lung>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_Volume>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Frequency> VENTILATION_frequency_hertz(
    double arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_frequency_hertz(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_frequency_hertzPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Frequency> Function(ffi.Float,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_frequency_hertz');
  late final _VENTILATION_frequency_hertz =
      _VENTILATION_frequency_hertzPtr.asFunction<
          ffi.Pointer<VENTILATION_Frequency> Function(
              double, ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Frequency> VENTILATION_frequency_bpm(
    double arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_frequency_bpm(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_frequency_bpmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Frequency> Function(ffi.Float,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_frequency_bpm');
  late final _VENTILATION_frequency_bpm =
      _VENTILATION_frequency_bpmPtr.asFunction<
          ffi.Pointer<VENTILATION_Frequency> Function(
              double, ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_frequency_delete(
    ffi.Pointer<VENTILATION_Frequency> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_frequency_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_frequency_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<VENTILATION_Frequency>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_frequency_delete');
  late final _VENTILATION_frequency_delete =
      _VENTILATION_frequency_deletePtr.asFunction<
          void Function(ffi.Pointer<VENTILATION_Frequency>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Ratio> VENTILATION_ratio_create(
    double arg0,
    double arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_ratio_create(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_ratio_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Ratio> Function(ffi.Float, ffi.Float,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_ratio_create');
  late final _VENTILATION_ratio_create =
      _VENTILATION_ratio_createPtr.asFunction<
          ffi.Pointer<VENTILATION_Ratio> Function(
              double, double, ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_ratio_delete(
    ffi.Pointer<VENTILATION_Ratio> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_ratio_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_ratio_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<VENTILATION_Ratio>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_ratio_delete');
  late final _VENTILATION_ratio_delete =
      _VENTILATION_ratio_deletePtr.asFunction<
          void Function(ffi.Pointer<VENTILATION_Ratio>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Cycle> VENTILATION_cycle_create(
    ffi.Pointer<VENTILATION_Frequency> arg0,
    ffi.Pointer<VENTILATION_Ratio> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_cycle_create(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_cycle_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Cycle> Function(
              ffi.Pointer<VENTILATION_Frequency>,
              ffi.Pointer<VENTILATION_Ratio>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_cycle_create');
  late final _VENTILATION_cycle_create =
      _VENTILATION_cycle_createPtr.asFunction<
          ffi.Pointer<VENTILATION_Cycle> Function(
              ffi.Pointer<VENTILATION_Frequency>,
              ffi.Pointer<VENTILATION_Ratio>,
              ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_cycle_delete(
    ffi.Pointer<VENTILATION_Cycle> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_cycle_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_cycle_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<VENTILATION_Cycle>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_cycle_delete');
  late final _VENTILATION_cycle_delete =
      _VENTILATION_cycle_deletePtr.asFunction<
          void Function(ffi.Pointer<VENTILATION_Cycle>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Ventilator> VENTILATION_ventilator_pcv(
    ffi.Pointer<VENTILATION_Cycle> arg0,
    ffi.Pointer<VENTILATION_PEEP> arg1,
    ffi.Pointer<VENTILATION_Pressure_Peak> arg2,
    ffi.Pointer<VENTILATION_error> arg3,
  ) {
    return _VENTILATION_ventilator_pcv(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _VENTILATION_ventilator_pcvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Ventilator> Function(
              ffi.Pointer<VENTILATION_Cycle>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_ventilator_pcv');
  late final _VENTILATION_ventilator_pcv =
      _VENTILATION_ventilator_pcvPtr.asFunction<
          ffi.Pointer<VENTILATION_Ventilator> Function(
              ffi.Pointer<VENTILATION_Cycle>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_Pressure_Peak>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Ventilator> VENTILATION_ventilator_vcv(
    ffi.Pointer<VENTILATION_Cycle> arg0,
    ffi.Pointer<VENTILATION_PEEP> arg1,
    ffi.Pointer<VENTILATION_Flow> arg2,
    ffi.Pointer<VENTILATION_error> arg3,
  ) {
    return _VENTILATION_ventilator_vcv(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _VENTILATION_ventilator_vcvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<VENTILATION_Ventilator> Function(
              ffi.Pointer<VENTILATION_Cycle>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>>('VENTILATION_ventilator_vcv');
  late final _VENTILATION_ventilator_vcv =
      _VENTILATION_ventilator_vcvPtr.asFunction<
          ffi.Pointer<VENTILATION_Ventilator> Function(
              ffi.Pointer<VENTILATION_Cycle>,
              ffi.Pointer<VENTILATION_PEEP>,
              ffi.Pointer<VENTILATION_Flow>,
              ffi.Pointer<VENTILATION_error>)>();

  ffi.Pointer<VENTILATION_Packet> VENTILATION_ventilator_control(
    ffi.Pointer<VENTILATION_Ventilator> arg0,
    ffi.Pointer<VENTILATION_Lung> arg1,
    ffi.Pointer<VENTILATION_error> arg2,
  ) {
    return _VENTILATION_ventilator_control(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _VENTILATION_ventilator_controlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<VENTILATION_Packet> Function(
                  ffi.Pointer<VENTILATION_Ventilator>,
                  ffi.Pointer<VENTILATION_Lung>,
                  ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_ventilator_control');
  late final _VENTILATION_ventilator_control =
      _VENTILATION_ventilator_controlPtr.asFunction<
          ffi.Pointer<VENTILATION_Packet> Function(
              ffi.Pointer<VENTILATION_Ventilator>,
              ffi.Pointer<VENTILATION_Lung>,
              ffi.Pointer<VENTILATION_error>)>();

  void VENTILATION_ventilator_delete(
    ffi.Pointer<VENTILATION_Ventilator> arg0,
    ffi.Pointer<VENTILATION_error> arg1,
  ) {
    return _VENTILATION_ventilator_delete(
      arg0,
      arg1,
    );
  }

  late final _VENTILATION_ventilator_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<VENTILATION_Ventilator>,
                  ffi.Pointer<VENTILATION_error>)>>(
      'VENTILATION_ventilator_delete');
  late final _VENTILATION_ventilator_delete =
      _VENTILATION_ventilator_deletePtr.asFunction<
          void Function(ffi.Pointer<VENTILATION_Ventilator>,
              ffi.Pointer<VENTILATION_error>)>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class VENTILATION_Compliance extends ffi.Opaque {}

final class VENTILATION_Elastance extends ffi.Opaque {}

final class VENTILATION_Resistance extends ffi.Opaque {}

final class VENTILATION_Flow extends ffi.Opaque {}

final class VENTILATION_Volume extends ffi.Opaque {}

final class VENTILATION_Pressure extends ffi.Opaque {}

final class VENTILATION_PEEP extends ffi.Opaque {}

final class VENTILATION_Pressure_Peak extends ffi.Opaque {}

final class VENTILATION_Packet extends ffi.Opaque {}

final class VENTILATION_Lung extends ffi.Opaque {}

final class VENTILATION_Frequency extends ffi.Opaque {}

final class VENTILATION_Ratio extends ffi.Opaque {}

final class VENTILATION_Cycle extends ffi.Opaque {}

final class VENTILATION_Ventilator extends ffi.Opaque {}

typedef VENTILATION_error = ffi.Int32;
typedef VENTILATION_bool = ffi.Uint8;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int VENTILATION_FALSE = 0;

const int VENTILATION_TRUE = 1;

const int VENTILATION_ERROR_OK = 0;

const int VENTILATION_ERROR_GENERIC = -1;

const int VENTILATION_ERROR_NULL = -2;
